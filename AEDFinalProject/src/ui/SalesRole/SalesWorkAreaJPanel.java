/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui.SalesRole;

import Business.DB4OUtil.DB4OUtil;
import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Network.Network;
import Business.Organization.ManufacturingOrganization;
import Business.Organization.Organization;
import Business.Organization.OrganizationDirectory;
import Business.Organization.PurchaseInventory;
import Business.Organization.SalesOrganization;
import Business.Organization.Vaccine;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.WorkRequest;
import Business.WorkQueue.approveVaccine;
import Business.WorkQueue.requestVaccine;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author vraj
 */
public class SalesWorkAreaJPanel extends javax.swing.JPanel {
        
    
    private EcoSystem system;
    private OrganizationDirectory directory;
    private JPanel userProcessContainer;
    private SalesOrganization organization;
    private Enterprise enterprise;
    private Network network;
    private UserAccount userAccount;
    private DB4OUtil dB4OUtil = DB4OUtil.getInstance();
    /**
     * Creates new form DistributionWorkAreaJPanel
     */
    public SalesWorkAreaJPanel(JPanel userProcessContainer, UserAccount account, SalesOrganization organization, Enterprise enterprise, EcoSystem system) {
        initComponents();
        
        this.userProcessContainer = userProcessContainer;
        this.organization = organization;
        this.enterprise = enterprise;
        this.system = system;
        this.userAccount = account;
        populateApproveTable();
        populateTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblVaccine = new javax.swing.JTable();
        btnReject = new javax.swing.JButton();
        txtComments = new javax.swing.JTextField();
        lblComment = new javax.swing.JLabel();
        btnApprove = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblOrders = new javax.swing.JTable();
        separatorLine = new javax.swing.JSeparator();
        lblTitle = new javax.swing.JLabel();

        setBackground(new java.awt.Color(36, 47, 65));
        setMaximumSize(new java.awt.Dimension(1440, 848));
        setMinimumSize(new java.awt.Dimension(1440, 848));
        setPreferredSize(new java.awt.Dimension(1440, 848));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tblVaccine.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Sender", "Receiver", "Quantity", "Status"
            }
        ));
        jScrollPane1.setViewportView(tblVaccine);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 440, -1, 180));

        btnReject.setFont(new java.awt.Font("Optima", 0, 16)); // NOI18N
        btnReject.setText("Reject");
        btnReject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRejectActionPerformed(evt);
            }
        });
        add(btnReject, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 350, -1, -1));

        txtComments.setBackground(new java.awt.Color(36, 47, 65));
        txtComments.setFont(new java.awt.Font("Optima", 0, 16)); // NOI18N
        txtComments.setForeground(new java.awt.Color(255, 255, 255));
        txtComments.setBorder(null);
        add(txtComments, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 310, 190, 20));

        lblComment.setFont(new java.awt.Font("Optima", 0, 16)); // NOI18N
        lblComment.setForeground(new java.awt.Color(255, 255, 255));
        lblComment.setText("Comments:");
        add(lblComment, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 310, -1, -1));

        btnApprove.setFont(new java.awt.Font("Optima", 0, 16)); // NOI18N
        btnApprove.setText("Approve");
        btnApprove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnApproveActionPerformed(evt);
            }
        });
        add(btnApprove, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 350, -1, -1));

        tblOrders.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Sender", "Receiver", "Quantity", "Status"
            }
        ));
        jScrollPane2.setViewportView(tblOrders);

        add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 110, -1, 180));

        separatorLine.setForeground(new java.awt.Color(255, 255, 255));
        separatorLine.setMinimumSize(new java.awt.Dimension(1, 12));
        separatorLine.setPreferredSize(new java.awt.Dimension(1, 12));
        add(separatorLine, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 330, 180, -1));

        lblTitle.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/SALESWORKAREA.png"))); // NOI18N
        add(lblTitle, new org.netbeans.lib.awtextra.AbsoluteConstraints(1340, 0, 100, 850));
    }// </editor-fold>//GEN-END:initComponents

    private void btnApproveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnApproveActionPerformed
        // TODO add your handling code here:
        ManufacturingOrganization org = null;
        for(Organization o : enterprise.getOrganizationDirectory().getOrganizationList()){
            for(UserAccount u : o.getUserAccountDirectory().getUserAccountList()){
                if(u.getRole().toString().equals("Business.Role.ManufacturingRole")){
                    org = ((ManufacturingOrganization)o);
                }
            }
            
        }
        for(Vaccine v : org.getVaccineDirectory()){
            System.out.println("Inside for");
            if(v.getStatus().equals("Approved")){
                System.out.println("Vaccine record approved");
                int selectedRow = tblOrders.getSelectedRow();
        if(selectedRow<0){
            JOptionPane.showMessageDialog(this, "Please select an order to approve");
            return;
        }
        requestVaccine request = (requestVaccine)tblOrders.getValueAt(selectedRow, 0);
        
        if(request.getStatus().equals("Approved")){
            JOptionPane.showMessageDialog(this, "Vaccine already approved");
            return;
        }
     
        if(validate(txtComments.getText())){
        request.setStatus("Approved");
        request.setTestResult("Approved");
        ArrayList<PurchaseInventory> inv = ((requestVaccine) request).getInventoryPurchase();
        if(inv!=null){
            for(PurchaseInventory p : inv){
                ((requestVaccine) request).setQty(p.getQty());
                
            }
            }
        
        
        populateTable();
        populateApproveTable();
        dB4OUtil.storeSystem(system);
        txtComments.setText("");
        }
        break;
            }
            else{
                JOptionPane.showMessageDialog(this, "You must have an approved vaccine in the inventory to manage orders");
                return;
            }
        }
        //dB4OUtil.storeSystem(system);
        //txtComments.setText("");
    }//GEN-LAST:event_btnApproveActionPerformed

    private void btnRejectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRejectActionPerformed
        // TODO add your handling code here:
        ManufacturingOrganization org = null;
        for(Organization o : enterprise.getOrganizationDirectory().getOrganizationList()){
            for(UserAccount u : o.getUserAccountDirectory().getUserAccountList()){
                if(u.getRole().toString().equals("Business.Role.ManufacturingRole")){
                    org = ((ManufacturingOrganization)o);
                }
            }
            
        }
        for(Vaccine v : org.getVaccineDirectory()){
            System.out.println("Inside for");
            if(v.getStatus().equals("Approved")){
                System.out.println("Vaccine record approved");
                int selectedRow = tblOrders.getSelectedRow();
        if(selectedRow<0){
            JOptionPane.showMessageDialog(this, "Please select an order to approve");
            return;
        }
        requestVaccine request = (requestVaccine)tblOrders.getValueAt(selectedRow, 0);
        
        if(request.getStatus().equals("Approved")){
            JOptionPane.showMessageDialog(this, "Vaccine already approved");
            return;
        }
     
        if(validate(txtComments.getText())){
        request.setStatus("Rejected");
        request.setTestResult("Rejected");
        ArrayList<PurchaseInventory> inv = ((requestVaccine) request).getInventoryPurchase();
        if(inv!=null){
            for(PurchaseInventory p : inv){
                ((requestVaccine) request).setQty(p.getQty());
                
            }
            }
        
        
        populateTable();
        populateApproveTable();
        dB4OUtil.storeSystem(system);
        txtComments.setText("");
        }
        break;
            }
            else{
                JOptionPane.showMessageDialog(this, "You must have an approved vaccine in the inventory to manage orders");
                return;
            }
        }
        //dB4OUtil.storeSystem(system);
        //txtComments.setText("");
    }//GEN-LAST:event_btnRejectActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnApprove;
    private javax.swing.JButton btnReject;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblComment;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JSeparator separatorLine;
    private javax.swing.JTable tblOrders;
    private javax.swing.JTable tblVaccine;
    private javax.swing.JTextField txtComments;
    // End of variables declaration//GEN-END:variables

    private void populateTable() {
        DefaultTableModel model = (DefaultTableModel) tblVaccine.getModel();
        model.setRowCount(0);
        System.out.println(enterprise.getName());
        try{
        for(WorkRequest wr : userAccount.getWorkQueue().getWorkRequestList()){
            if(wr instanceof approveVaccine){
            UserAccount inv = ((approveVaccine) wr).getSales();
            Object[] row = new Object[4];
            row[0] = wr;
            row[1] = inv.getUsername();
//            if(inv!=null){
//            for(PurchaseInventory p : inv){
//                row[2] = p.getQty();
//            }
            row[2] = "20";
            row[3] = wr.getStatus();
            
            model.addRow(row);
            }
        }
        }
    
        catch(NullPointerException e){
            System.out.println("Null exception caught");
    }
    }

    private void populateApproveTable() {
        DefaultTableModel model = (DefaultTableModel) tblOrders.getModel();
        model.setRowCount(0);
        System.out.println(enterprise.getName());
        try{
        for(WorkRequest wr : userAccount.getWorkQueue().getWorkRequestList()){
//            UserAccount inv = ((approveVaccine) wr).getSales();
            if(wr instanceof requestVaccine){
            Object[] row = new Object[4];
            row[0] = wr;
            row[1] = wr.getReceiver().getUsername();
//            if(inv!=null){
//            for(PurchaseInventory p : inv){
//                row[2] = p.getQty();
//            }
            row[2] = ((requestVaccine) wr).getQty();
            row[3] = wr.getStatus();
            
            model.addRow(row);
            }
        }
        }
    
        catch(NullPointerException e){
            System.out.println("Null exception caught");
    }
    }
    
    private boolean validate(String comment) {
       if(comment.length()<1){
           JOptionPane.showMessageDialog(this, "Please enter comments");
           return false;
       }
           return true;
    }
    
}
