/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui.PurchaseRole;

import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Enterprise.Enterprise.EnterpriseType;
<<<<<<< HEAD
=======
import Business.Enterprise.ServiceEnterprise;
>>>>>>> main
import Business.Network.Network;
import Business.Organization.ManufacturingOrganization;
import Business.Organization.Organization;
import Business.Organization.OrganizationDirectory;
import Business.Organization.PurchaseInventory;
import Business.Organization.PurchaseOrganization;
import Business.Organization.Vaccine;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.requestVaccine;
<<<<<<< HEAD
=======
import java.util.ArrayList;
>>>>>>> main
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/**
 *
 * @author abhis
 */
public class RequestVaccineJPanel extends javax.swing.JPanel {

    private OrganizationDirectory directory;
    private JPanel userProcessContainer;
    private PurchaseOrganization organization;
    private Enterprise enterprise;
    private EcoSystem business;
    public Enterprise currEP;
//    private Network network;
    private UserAccount userAccount;
<<<<<<< HEAD
=======
    private ArrayList<PurchaseInventory> inventory = new ArrayList<>();
>>>>>>> main
    
    /**
     * Creates new form RequestVaccineJPanel
     */
    
    public RequestVaccineJPanel(OrganizationDirectory directory, JPanel userProcessContainer, PurchaseOrganization organization, Enterprise enterprise, UserAccount userAccount) {
        initComponents();
        this.directory = directory;
        this.userProcessContainer = userProcessContainer;
        this.organization = organization;
        this.enterprise = enterprise;
//        this.network = network;
        this.userAccount = userAccount;
        populateOrganizationComboBox();
        
    }

    public void populateOrganizationComboBox(){
        ManufacturerjComboBox.removeAllItems();
        
        Network currnet = enterprise.getNetwork();
        for(Enterprise e: currnet.getEnterpriseDirectory().getEnterpriseList()){
        if(e.getEnterpriseType() == EnterpriseType.Pharmaceutical){
            ManufacturerjComboBox.addItem(e.getName());
            currEP = e;
            }
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        ManufacturerjComboBox = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        txtrequestQty = new javax.swing.JTextField();
        btnOrderVaccine = new javax.swing.JButton();

        jLabel1.setText("Select Manufacturer");

        ManufacturerjComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        ManufacturerjComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ManufacturerjComboBoxActionPerformed(evt);
            }
        });

        jLabel2.setText("Enter Quantity");

        btnOrderVaccine.setText("Order");
        btnOrderVaccine.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOrderVaccineActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(161, 161, 161)
                        .addComponent(btnOrderVaccine))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(51, 51, 51)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addGap(68, 68, 68)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(ManufacturerjComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtrequestQty, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(77, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(66, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(ManufacturerjComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtrequestQty, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(57, 57, 57)
                .addComponent(btnOrderVaccine)
                .addGap(75, 75, 75))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void ManufacturerjComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ManufacturerjComboBoxActionPerformed
        // TODO add your handling code here:
//        ManufacturingOrganization org = (ManufacturingOrganization) ManufacturerjComboBox.getSelectedItem();
//        
//        if(org!=null){
//        populateVaccineComboBox(org);
//        }
    }//GEN-LAST:event_ManufacturerjComboBoxActionPerformed

    private void btnOrderVaccineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOrderVaccineActionPerformed
        // TODO add your handling code here:
<<<<<<< HEAD
        UserAccount receive = new UserAccount();
        if(validate(ManufacturerjComboBox.getSelectedItem().toString(),txtrequestQty.getText())){
//            PurchaseInventory pi = new PurchaseInventory();
//            pi.setManuEP(currEP);
//            pi.setQty(Integer.parseInt(txtrequestQty.getText()));
//            organization.addPI(pi);
            requestVaccine rv = new requestVaccine();
            rv.setPurchaser(userAccount);
            rv.setSender(userAccount);
            for(UserAccount u : currEP.getUserAccountDirectory().getUserAccountList()){
                if(u.getUsername().toString().equals(ManufacturerjComboBox.getSelectedItem().toString())){
                    rv.setReceiver(u);
=======
        
        UserAccount receive = new UserAccount();
        if(validate(ManufacturerjComboBox.getSelectedItem().toString(),txtrequestQty.getText())){
            PurchaseInventory pi = new PurchaseInventory();
            pi.setManuEP(currEP);
            pi.setQty(Integer.parseInt(txtrequestQty.getText()));
            inventory.add(pi);
//            organization.addPI(pi);
            
        requestVaccine rv = new requestVaccine();
            rv.setPurchaser(userAccount);
            rv.setSender(userAccount);
            for(UserAccount u : currEP.getUserAccountDirectory().getUserAccountList()){
                System.out.println(ManufacturerjComboBox.getSelectedItem().toString());
                if(u.getUsername().toString().equals(ManufacturerjComboBox.getSelectedItem().toString())){
                    System.out.println(u.getUsername());
                    rv.setReceiver(u);
                    receive = u;
>>>>>>> main
                }
            }
            rv.setStatus("Ordered");
            rv.setQty(Integer.parseInt(txtrequestQty.getText()));
<<<<<<< HEAD
            receive.getWorkQueue().getWorkRequestList().add(rv);
            userAccount.getWorkQueue().getWorkRequestList().add(rv);
            JOptionPane.showMessageDialog(this, "Order Created");
        }
=======
            rv.setInventoryPurchase(inventory);
            receive.getWorkQueue().getWorkRequestList().add(rv);
            Network currnet = enterprise.getNetwork();
        for(Enterprise e: currnet.getEnterpriseDirectory().getEnterpriseList()){
        if(e.getEnterpriseType() == EnterpriseType.Pharmaceutical){
            System.out.println("Searching Org");
            for(Organization o : e.getOrganizationDirectory().getOrganizationList()){
                System.out.println("Org found");
                
                System.out.println("Searching user");
            for(UserAccount u : o.getUserAccountDirectory().getUserAccountList()){
                
                System.out.println("user found");
                System.out.println(u.getRole().toString());
                if(u.getRole().toString().equals("Business.Role.ManufacturingRole")){
                    
                System.out.println("role found");
                    System.out.println(u.getUsername());
                    rv.setReceiver(u);
                    u.getWorkQueue().getWorkRequestList().add(rv);
                }
            }
        }
            }
        }
            
            userAccount.getWorkQueue().getWorkRequestList().add(rv);
            receive.getWorkQueue().getWorkRequestList().add(rv);
//            for(Network n : business.getNetworkList()){
//            for(Enterprise e : n.getEnterpriseDirectory().getEnterpriseList()){
//                e.setEnterpriseType(EnterpriseType.Service);
//                if(e instanceof ServiceEnterprise){
//                Organization org = null;
//                for(Organization o : e.getOrganizationDirectory().getOrganizationList()){
//                    if(o instanceof PurchaseOrganization){
//                        org = o;
//                        break;
//                    }
//                }
//                if (org != null) {
//
//                        org.getWorkQueue().getWorkRequestList().add(rv);
//                        userAccount.getWorkQueue().getWorkRequestList().add(rv);
//                    }
//            }
//            }
//        }
            JOptionPane.showMessageDialog(this, "Order Created");
        }
        
>>>>>>> main
    }//GEN-LAST:event_btnOrderVaccineActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> ManufacturerjComboBox;
    private javax.swing.JButton btnOrderVaccine;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JTextField txtrequestQty;
    // End of variables declaration//GEN-END:variables

    private boolean validate(String manuName, String Qty) {
        if(manuName.length()<1){
            JOptionPane.showMessageDialog(this,"Please select a manufacturer from the list");
            return false;
        }
        if(Qty.length()<1){
            JOptionPane.showMessageDialog(this, "Please specify the quantity to order");
            return false;
        }
        return true;
    }

}
